/*******************************************************************************
    Copyright (C), 1988-2006, Huawei Tech. Co., Ltd.

    FileName   : ssenums.h

    Author     :

    Version    : 1.0

    Date       : 2005-11-12

    Description: This file containes the enumerations used in MiniSip.


    Function List:
        None


    History:
        1. Date        : yyyy-mm-dd
           Tag         : <MOD.00X>
           Author      : XXX
           Modification: XXX
*******************************************************************************/

#ifndef _SS_ENUMS_H_
#define _SS_ENUMS_H_

#ifdef __cplusplus
extern "C" {
#endif

#define SIP_ENUM_END   0XFFFFFFF
#define SIP_TOTAL_HDRS 128

typedef enum _EN_SIP_BASIC_HDR_ID
{
/*Please don't modify the order of core headers because it keeps the same
  order as the definition of SipHdrS*/
    SIP_BASIC_HDR_ID_CSEQ,
    SIP_BASIC_HDR_ID_CALLID,
    SIP_BASIC_HDR_ID_CONTACT_LIST,
    SIP_BASIC_HDR_ID_CONTENT_LENGTH,
    SIP_BASIC_HDR_ID_FROM,
    SIP_BASIC_HDR_ID_RECORD_ROUTE_LIST,
    SIP_BASIC_HDR_ID_ROUTE_LIST,
    SIP_BASIC_HDR_ID_TIMESTAMP,
    SIP_BASIC_HDR_ID_TO,
    SIP_BASIC_HDR_ID_VIA_LIST,
    SIP_BASIC_HDR_ID_WARNING_LIST,
    SIP_BASIC_HDR_ID_BUTT,
    SIP_BASIC_HDR_ID_END = SIP_ENUM_END
}EN_SIP_BASIC_HDR_ID;


typedef enum _EN_SIP_MESSAGE_TYPE
{
    SIP_REQUEST,
    SIP_RESPONSE,
    SIP_FRAG_REQUEST,
    SIP_FRAG_RESPONSE,
    SIP_FRAG_NO_START_LINE,
    SIP_MESSAGE_TYPE_BUTT,
    SIP_MESSAGE_TYPE_ENUM_END = SIP_ENUM_END
}EN_SIP_MESSAGE_TYPE;

typedef enum _EN_SIP_RESULT
{
    SIP_RET_SUCCESS,
    SIP_RET_FAILURE,
    SIP_RET_MALLOC_FAILED,
    SIP_RET_INVALID_PARAM,
    SIP_RET_INVALID_STATE,
    SIP_RET_ERR_MANDATORY_HDR,
    SIP_RET_ERR_BRANCH_CLASH,
    /*DSM operation result*/
    SIP_RET_NOT_HEADER_LIST,
    SIP_RET_RPORT_ERROR,

    SIP_RET_BUTT,
    SIP_RET_ENUM_END = SIP_ENUM_END
}EN_SIP_RESULT;

typedef enum _EN_SIP_STATUS_CODE_INFORMATIONAL
{
    SIP_STATUS_INFO_TRYING               = 100,
    SIP_STATUS_UPDATE_REQUESTED          = 155,
    SIP_STATUS_INFO_RINGING              = 180,
    SIP_STATUS_INFO_CALL_BEING_FORWARDED = 181,
    SIP_STATUS_INFO_QUEUED               = 182,
    SIP_STATUS_INFO_SESSION_PROGRESS     = 183,
    SIP_STATUS_INFO_BUTT                 = 199,
    SIP_STATUS_INFO_ENUM_END             = SIP_ENUM_END
}EN_SIP_STATUS_CODE_INFORMATIONAL;

typedef enum _EN_SIP_STATUS_CODE_SUCCESS
{
    SIP_STATUS_SUCC_OK       = 200,
    SIP_STATUS_ACCEPTED      = 202,
    SIP_STATUS_SUCC_BUTT     = 299,
    SIP_STATUS_SUCC_ENUM_END = SIP_ENUM_END
}EN_SIP_STATUS_CODE_SUCCESS;

typedef enum _EN_SIP_STATUS_CODE_REDIRECTION
{
    SIP_STATUS_REDIR_MULTIPLE_CHOICES    = 300,
    SIP_STATUS_REDIR_MOVED_PERMANENTLY   = 301,
    SIP_STATUS_REDIR_MOVED_TEMPORARILY   = 302,
    SIP_STATUS_REDIR_USE_PROXY           = 305,
    SIP_STATUS_REDIR_ALTERNATIVE_SERVICE = 380,
    SIP_STATUS_REDIR_BUTT                = 399,
    SIP_STATUS_REDIR_ENUM_END            = SIP_ENUM_END
}EN_SIP_STATUS_CODE_REDIRECTION;

typedef enum _EN_SIP_STATUS_CODE_CLIENT_ERROR
{
    SIP_STATUS_CLIENT_ERR_BAD_REQUEST                         = 400,
    SIP_STATUS_CLIENT_ERR_UNAUTHORIZED                        = 401,
    SIP_STATUS_CLIENT_ERR_PAYMENT_REQUIRED                    = 402,
    SIP_STATUS_CLIENT_ERR_FORBIDDEN                           = 403,
    SIP_STATUS_CLIENT_ERR_NOT_FOUND                           = 404,
    SIP_STATUS_CLIENT_ERR_METHOD_NOT_ALLOWED                  = 405,
    SIP_STATUS_CLIENT_ERR_NOT_ACCEPTABLE                      = 406,
    SIP_STATUS_CLIENT_ERR_PROXY_AUTHENTICATION_REQUIRED       = 407,
    SIP_STATUS_CLIENT_ERR_REQUEST_TIMEOUT                     = 408,
    SIP_STATUS_CLIENT_ERR_GONE                                = 410,
    SIP_STATUS_CLIENT_ERR_REQUEST_ENTITY_TOO_LARGE            = 413,
    SIP_STATUS_CLIENT_ERR_REQUEST_URI_TOO_LARGE               = 414,
    SIP_STATUS_CLIENT_ERR_UNSUPPORTED_MEDIA_TYPE              = 415,
    SIP_STATUS_CLIENT_ERR_UNSUPPORTED_URI_SCHEME              = 416,
    SIP_STATUS_CLIENT_ERR_BAD_EXTENSION                       = 420,
    SIP_STATUS_CLIENT_ERR_EXTENSION_REQUIRED                  = 421,
    SIP_STATUS_CLIENT_ERR_SESS_INTERVAL_TOO_SMALL             = 422,
    SIP_STATUS_CLIENT_ERR_INTERVAL_TOO_BRIEF                  = 423,
    SIP_STATUS_CLIENT_ERR_PROVIDE_REFERROR_ID_ERR             = 429,
    SIP_STATUS_CLIENT_ERR_TEMPORARILY_NOT_AVAILABLE           = 480,
    SIP_STATUS_CLIENT_ERR_CALL_LEG_TRANSACTION_DOES_NOT_EXIST = 481,
    SIP_STATUS_CLIENT_ERR_LOOP_DETECTED                       = 482,
    SIP_STATUS_CLIENT_ERR_TOO_MANY_HOPS                       = 483,
    SIP_STATUS_CLIENT_ERR_ADDRESS_INCOMPLETE                  = 484,
    SIP_STATUS_CLIENT_ERR_AMBIGUOUS                           = 485,
    SIP_STATUS_CLIENT_ERR_BUSY_HERE                           = 486,
    SIP_STATUS_CLIENT_ERR_REQUEST_TERMINATED                  = 487,
    SIP_STATUS_CLIENT_ERR_NOT_ACCEPTABLE_HERE                 = 488,
    SIP_STATUS_CLIENT_ERR_BAD_EVENT                           = 489,
    SIP_STATUS_CLIENT_ERR_REQUEST_PENDING                     = 491,
    SIP_STATUS_CLIENT_ERR_UNDECIPHERABLE                      = 493,
    SIP_STATUS_CLIENT_ERR_BUTT                                = 499,
    SIP_STATUS_CLIENT_ERR_ENUM_END                            = SIP_ENUM_END
}EN_SIP_STATUS_CODE_CLIENT_ERROR;

typedef enum _EN_SIP_STATUS_CODE_SERVER_ERROR
{
    SIP_STATUS_SERVER_ERR_INTERNAL_SERVER_ERROR     = 500,
    SIP_STATUS_SERVER_ERR_NOT_IMPLEMENTED           = 501,
    SIP_STATUS_SERVER_ERR_BAD_GATEWAY               = 502,
    SIP_STATUS_SERVER_ERR_SERVICE_UNAVAILABLE       = 503,
    SIP_STATUS_SERVER_ERR_SERVER_TIME_OUT           = 504,
    SIP_STATUS_SERVER_ERR_SIP_VERSION_NOT_SUPPORTED = 505,
    SIP_STATUS_SERVER_ERR_MESSAGE_TOO_LARGE         = 513,
    SIP_STATUS_SERVER_ERR_BUTT                      = 599,
    SIP_STATUS_SERVER_ERR_ENUM_END                  = SIP_ENUM_END
}EN_SIP_STATUS_CODE_SERVER_ERROR;

typedef enum _EN_SIP_STATUS_CODE_GLOBAL_FAILURE
{
    SIP_STATUS_GLOBAL_FAIL_BUSY_EVERYWHERE         = 600,
    SIP_STATUS_GLOBAL_FAIL_DECLINE                 = 603,
    SIP_STATUS_GLOBAL_FAIL_DOES_NOT_EXIST_ANYWHERE = 604,
    SIP_STATUS_GLOBAL_FAIL_NOT_ACCEPTABLE          = 606,
    SIP_STATUS_GLOBAL_FAIL_DIALOG_TERMINATED       = 687,
    SIP_STATUS_GLOBAL_BUTT                         = 699,
    SIP_STATUS_GLOBAL_ENUM_END                     = SIP_ENUM_END
}EN_SIP_STATUS_CODE_GLOBAL_FAILURE;

typedef enum _EN_SIP_TERMINATE_MODE
{
    SIP_TERM_MODE_FORCEFUL_NO_CANCEL_RSP = 0,
    SIP_TERM_MODE_FORCEFUL,
    SIP_TERM_MODE_GRACEFUL_NO_CANCEL_RSP,
    SIP_TERM_MODE_GRACEFUL,
    SIP_TERM_MODE_BUTT,
    SIP_TERM_MODE_ENUM_END = SIP_ENUM_END
}EN_SIP_TERMINATE_MODE;

typedef enum _EN_SIP_ADDRESS_TYPE
{
    SIP_ADDR_TYPE_HOST_NAME = 0,
    SIP_ADDR_TYPE_IPV4,
    SIP_ADDR_TYPE_IPV6,
    SIP_ADDR_TYPE_BUTT,
    SIP_ADDR_TYPE_ENUM_END = SIP_ENUM_END
}EN_SIP_ADDRESS_TYPE;

/*Nobody use this so that comment it*/
/*typedef enum _SipCompressionTypeEn
{
    SIGCOMP = 1,
    COMP_OTHERS,
    SIP_COMPRESSION_TYPE_BUTT,
    SIP_COMPRESSION_TYPE_ENUM_END = SIP_ENUM_END
}SipCompressionTypeEn;
*/

typedef enum _EN_SIP_SEND_RESULT
{
    SIP_SEND_RESULT_SUCCESS = 0,
    SIP_SEND_RESULT_ERROR_ICMP,
    SIP_SEND_RESULT_ERROR_LOCAL,
    SIP_SEND_RESULT_BUTT,
    SIP_SEND_RESULT_END = SIP_ENUM_END
}EN_SIP_SEND_RESULT;

typedef enum _EN_SIP_TXN_STATE
{
    SIP_TXN_STATE_IDLE = 0,
    SIP_TXN_STATE_CALLING,   /* this state is valid for Client Only */
    SIP_TXN_STATE_TRYING,
    SIP_TXN_STATE_PROCEEDING,
    SIP_TXN_STATE_COMPLETED,
    SIP_TXN_STATE_CONFIRMED, /* 5, this state is valid for Server Only */
    SIP_TXN_STATE_BUTT,
    SIP_TXN_STATE_END = SIP_ENUM_END
}EN_SIP_TXN_STATE;


/* Added By Thota */
typedef enum _EN_SIP_MSG_PEEK_INFO
{
    SIP_MSG_PEEK_INFO_INCOMPLETE,
    SIP_MSG_PEEK_INFO_COMPLETE,
    SIP_MSG_PEEK_INFO_UNKNOWN,
    SIP_MSG_PEEK_INFO_BUTT,
    SIP_MSG_PEEK_INFO_ENUM_END = SIP_ENUM_END
}EN_SIP_MSG_PEEK_INFO;

/* Added By Thota */
/* TKN_TYPE enum is a continuation of header-id ,this is to have unique token types,
   to avoid conflict between the header-id used as token and other token-types
   (method, etc)
*/

typedef enum _EN_SIP_TKN_TYPE
{
    SIP_TKN_TYPE_METHOD = SIP_TOTAL_HDRS + 1,
    SIP_TKN_TYPE_TRANSPORT_VALUE,
    SIP_TKN_TYPE_USER_VALUE,
    SIP_TKN_TYPE_COMPRESSION_VALUE,
    SIP_TKN_TYPE_DATE_MONTH,
    SIP_TKN_TYPE_DATE_WEEK_DAY,
    SIP_TKN_TYPE_BUTT,
    SIP_TKN_TYPE_ENUM_END = SIP_ENUM_END
}EN_SIP_TKN_TYPE;

typedef enum _EN_SIP_METHOD
{
    SIP_METHOD_EXT = 0, /* VPP_TOKEN_UNKNOW_ID */
    SIP_METHOD_INVITE,
    SIP_METHOD_ACK,
    SIP_METHOD_OPTIONS,
    SIP_METHOD_BYE,
    SIP_METHOD_CANCEL,
    SIP_METHOD_REGISTER,
    SIP_METHOD_INFO,
    SIP_METHOD_PRACK,
    SIP_METHOD_SUBSCRIBE,
    SIP_METHOD_NOTIFY,
    SIP_METHOD_UPDATE,
    SIP_METHOD_MESSAGE,
    SIP_METHOD_UNSUBSCRIBE,
    SIP_METHOD_REFER,
    SIP_METHOD_PUBLISH,
    SIP_METHOD_BUTT,
    SIP_METHOD_ENUM_END = SIP_ENUM_END
}EN_SIP_METHOD;

typedef enum _EN_SIP_URI_SCHEME
{
    SIP_URI_SCH_EXT = 0,
    SIP_URI_SCH_SIP,
    SIP_URI_SCH_SIPS,
    SIP_URI_SCH_BUTT,
    SIP_URI_SCH_ENUM_END = SIP_ENUM_END
}EN_SIP_URI_SCHEME;

typedef enum _EN_SIP_TRANSPORT
{
    SIP_TRANSPORT_EXT = 0, /* VPP_TOKEN_UNKNOW_ID */
    SIP_TRANSPORT_UDP,
    SIP_TRANSPORT_TCP,
    SIP_TRANSPORT_TLS,
    SIP_TRANSPORT_SCTP,
    SIP_TRANSPORT_BUTT,
    SIP_TRANSPORT_ENUM_END = SIP_ENUM_END
}EN_SIP_TRANSPORT;

typedef enum _EN_SIP_USER
{
    SIP_USER_EXT = 0, /* VPP_TOKEN_UNKNOW_ID */
    SIP_USER_PHONE,
    SIP_USER_IP,
    SIP_USER_BUTT,
    SIP_USER_ENUM_END = SIP_ENUM_END
}EN_SIP_USER;


typedef enum _EN_SIP_COMPRESSION
{
    SIP_COMPRESSION_EXT = 0, /* VPP_TOKEN_UNKNOW_ID */
    SIP_COMPRESSION_SIGCOMP,
    SIP_COMPRESSION_BUTT,
    SIP_COMPRESSION_ENUM_END = SIP_ENUM_END
}EN_SIP_COMPRESSION;

typedef enum _EN_SIP_DATE_MONTH
{
    SIP_DATE_MONTH_JAN = 1,
    SIP_DATE_MONTH_FEB,
    SIP_DATE_MONTH_MAR,
    SIP_DATE_MONTH_APR,
    SIP_DATE_MONTH_MAY,
    SIP_DATE_MONTH_JUN,
    SIP_DATE_MONTH_JUL,
    SIP_DATE_MONTH_AUG,
    SIP_DATE_MONTH_SEP,
    SIP_DATE_MONTH_OCT,
    SIP_DATE_MONTH_NOV,
    SIP_DATE_MONTH_DEC,
    SIP_DATE_MONTH_BUTT,
    SIP_DATE_MONTH_ENUM_END = SIP_ENUM_END
}EN_SIP_DATE_MONTH;



typedef enum _EN_SIP_DATE_WEEK_DAY
{
    SIP_DATE_WEEK_DAY_MON =1,
    SIP_DATE_WEEK_DAY_TUE,
    SIP_DATE_WEEK_DAY_WED,
    SIP_DATE_WEEK_DAY_THU,
    SIP_DATE_WEEK_DAY_FRI,
    SIP_DATE_WEEK_DAY_SAT,
    SIP_DATE_WEEK_DAY_SUN,
    SIP_DATE_WEEK_DAY_BUTT,
    SIP_DATE_WEEK_DAY_ENUM_END = SIP_ENUM_END
}EN_SIP_DATE_WEEK_DAY;


/* Because application want to operate on some parameters, so they can use
the following parameter ID to indicate the inputted type of parameters*/

typedef enum _EN_SIP_PARAM_ID
{
    SIP_PARAM_ID_TOKEN = 0,
    SIP_PARAM_ID_HOST,
    SIP_PARAM_ID_HOST_PORT,
    SIP_PARAM_ID_SIP_URI,
    SIP_PARAM_ID_URI,
    SIP_PARAM_ID_SIP_URI_PTR,
    SIP_PARAM_ID_BUTT,
    SIP_PARAM_ID_END = SIP_ENUM_END
}EN_SIP_PARAM_ID;


#ifdef __cplusplus
}
#endif

#endif /* _SS_ENUMS_H_ */

