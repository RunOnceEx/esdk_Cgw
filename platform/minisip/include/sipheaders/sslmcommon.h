/******************************************************************************
    Copyright (C), 1988-2006, Huawei Tech. Co., Ltd.

    FileName   : sslmcommon.h

    Author     : Srinivas

    Version    : 1.0

    Date       : 2005-09-09

    Description: This header file contains the API functions provided by the
                 stack for the stack users to enable/disable the log of the stack.

    Function List:

    History:
        1. Date         : <YYYY-MM-DD>
           Tag          :
           Author       :
           Modification :
******************************************************************************/

#ifndef _SS_LM_COMMON_H_
#define _SS_LM_COMMON_H_

#include "sssipbase.h"

#ifdef __cplusplus
extern "C" {
#endif

/* This combined enumeration will have the logs of each component and the main
intention here is to eleminate duplicate strings, work with IDs only with
display atr backend and also locale specific customization ogf log strings. The
log levels are also recommended here for generic logs for uniformity */
/*lint -e793*/
typedef enum _EN_SIP_LOG_STR_ID
{
    /* General Log Strings that can be used by any component. Please ensure
    that we use this section and minimze the overall number of log strings that
    we need to define in the stack */
    SIP_LOG_STRING_INVALID_PARAMETERS,
    SIP_LOG_STRING_MEMORY_ALLOC_FAILURE,
    SIP_LOG_STRING_DSM_OPERATION_ERROR,
    SIP_LOG_STRING_TAG_GENERATION_PROBLEM,
    SIP_LOG_STRING_INTERFACE_NOT_REGISTERED,
    SIP_LOG_STRING_CODEC_INIT_FAILED,
    SIP_LOG_STRING_TXN_INIT_FAILED,
    SIP_LOG_STRING_RANDINIT_FAILED,
    SIP_LOG_STRING_SYS_ALREADY_INTIALIZED,
    SIP_LOG_STRING_BRANCH_GENERATION_PROBLEM,
    SIP_LOG_STRING_FEATURE_NOT_ENABLED_OR_DISABLED_PROPERLY,

    /* Transport component specific Log strings */
    SIP_LOG_STRING_ENCODE_FAILURE,
    SIP_LOG_STRING_DECODE_FAILURE,
    SIP_LOG_STRING_CREATE_BODY_FAILURE,
    SIP_LOG_STRING_VIA_PROTOCOL_CHANGE_FAILURE,
    SIP_LOG_STRING_TPTD_SEND_FAILURE,
    SIP_LOG_STRING_VIA_NOT_FOUND_IN_RESONSE,
    SIP_LOG_STRING_CANNOT_DETERMINE_DESTINATION_ADDR_FOR_RESPONSE,
    SIP_LOG_STRING_RECEIVED_PARAM_ADDITION_FAILURE,
    SIP_LOG_STRING_VIA_NOT_FOUND_IN_REQUEST,
    SIP_LOG_STRING_TPT_ADDR_TO_HOST_ADDR_CONV_FAILURE,
    SIP_LOG_STRING_BASE_MSG_CREATE_ERROR,
    SIP_LOG_STRING_INVALID_SIP_MSG_TYPE,
    SIP_LOG_STRING_VALIDATION_ABORTED,
     /* Sajeesh Added */
    SIP_LOG_STRING_MAND_HDRS_MISSING,
    SIP_LOG_STRING_VALIDATION_FAILED,
    SIP_LOG_STRING_ADDRPORT_FAILED,
    SIP_LOG_STRING_INVALID_SIP_VERSION_FOR_REQ,
    SIP_LOG_STRING_CSEQ_MTHOD_NOT_MATCHING_REQ_LINE,
    SIP_LOG_STRING_INVALID_TPT_PROTO_IN_VIA_FOR_REQ,
    SIP_LOG_STRING_CNTLEN_VALID_FAILED_FOR_REQ,
    SIP_LOG_STRING_INVALID_VIA_PROTOCOL,
    SIP_LOG_STRING_STR_BUF_OPERATION_FAILED,
    SIP_LOG_STRING_INVALID_TPT_PROTOCOL,
    SIP_LOG_STRING_INVALID_RPORT_FIELD,
    SIP_LOG_STRING_INVALID_ADDR_TYPE,
    /* Transaction component specific Log strings */
    SIP_LOG_STRING_CB_ALLOC_FAILURE,
    SIP_LOG_STRING_CB_RETRIEVE_FAILURE,
    SIP_LOG_STRING_UNEXPECTED_EVENT_OCCURRED,
    SIP_LOG_STRING_FAILED_TO_HANDLE_EVENT,
    SIP_LOG_STRING_TXN_TERMINATED,
    SIP_LOG_STRING_TXN_CB_DESTROYED,
    SIP_LOG_STRING_TXN_CB_ALREADY_DESTROYED,
    SIP_LOG_STRING_GENERATE_ACK_FAILURE,
    SIP_LOG_STRING_GENERATE_ERROR_FAILURE,
    SIP_LOG_STRING_SEND_MESSAGE_TO_TPT_FAILURE,
    SIP_LOG_STRING_SEND_MESSAGE_TO_TU_FAILURE,
    SIP_LOG_STRING_SEND_RESULT_TO_TU_FAILURE,
    SIP_LOG_STRING_MESSAGE_CONSUMED_BY_TXN,
    SIP_LOG_STRING_TXN_NOT_IN_USE,
    SIP_LOG_STRING_TXN_NOT_MATCH,
    SIP_LOG_STRING_FAILED_TO_ADD_PROTOCOL_TO_MSG,
    SIP_LOG_STRING_TXN_URI_MATCH_FAILED,
    SIP_LOG_STRING_TXN_TO_TAG_MATCH_FAILED,
    SIP_LOG_STRING_TXN_FROM_TAG_MATCH_FAILED,
    SIP_LOG_STRING_TXN_CSEQ_MATCH_FAILED,
    SIP_LOG_STRING_TXN_VIA_MATCH_FAILED,
    SIP_LOG_STRING_TXN_GET_STATE_FAILED,
    SIP_LOG_STRING_TXN_GET_EVENT_FAILED,
    SIP_LOG_STRING_TXN_INVALID_TXN_TYPE,
    SIP_LOG_STRING_TXN_RECV_MSG_PROC_FAILED,
    SIP_LOG_STRING_TXN_CANCEL_PROC_FAILED,
    SIP_LOG_STRING_TXN_GET_BRANCH_ID_FAILED,
    SIP_LOG_STRING_TXN_GET_CALL_ID_FAILED,
    SIP_LOG_STRING_TXN_GET_METHOD_FAILED,
    SIP_LOG_STRING_TXN_GET_TXN_TYPE_FAILED,
    SIP_LOG_STRING_TXN_INVALID_MESG_RECVD,
    SIP_LOG_STRING_TXN_COPY_NWINFO_FAILED,
    SIP_LOG_STRING_TXN_INVALID_STATE,
    SIP_LOG_STRING_TXN_DSM_CREATE_RESP_FAILED,
    SIP_LOG_STRING_TXN_CREATE_RESP_FAILED,
    SIP_LOG_STRING_TXN_INVALID_OBJID,
    SIP_LOG_STRING_TXN_INVALID_TIMER,
    SIP_LOG_STRING_INTF_NOT_REGISTERED,
    SIP_LOG_STRING_SEND_FAIL_IND_HNDL_FAILURE,
    SIP_LOG_STRING_MANDATORY_HEADER_MISSING,
    SIP_LOG_STRING_START_TIMER_FAILURE,
    SIP_LOG_STRING_DUPLICATE_BRANCH_ID,

    /* Codec specific log strings */
    SIP_LOG_STRING_CODEC_DEC_FAILED,

    SIP_LOG_STRING_BUTT,
    SIP_LOG_STRING_END = SIP_ENUM_END
} EN_SIP_LOG_STR_ID;
/*lint +e793*/

/***************** File Name enum for Log *********************/
typedef enum _EN_SIP_FILE_NAME
{
    /*Intialization, log, cfg etc */
    SIP_LMINIT_FILE = 0,
    SIP_LMLOG_FILE,
    SIP_LM_MAINTAIN_FILE,
    SIP_LM_OS_WRAPPER_FILE,

    /* transaction File name enums */
    SS_TXN_CANCEL,
    SS_TXN_CLIENT_FSM, /* 5 */
    SS_TXN_HI_INTF,
    SS_TXN_INIT,
    SS_TXN_LI_INTF,
    SS_TXN_MGMT,
    SS_TXN_SERVER_FSM, /* 10 */
    SS_TXN_TIMER,
    SS_TXN_UTIL,
    /*For DSM Files*/
    SS_DSM_UTIL,
    SS_DSM_HDRS,
    SS_DSM_METADATAOP,
    SS_DSM_CNTHDRSUTILS,
    /* Transport File name enums */
    SS_TPT_CORE,

    SS_CODEC_SIP_CNT_HDR_UTILS,
    SS_CODEC_LEVEL_2,

    EN_SIP_FILE_BUTT,
    EN_SIP_FILE_END = SIP_ENUM_END
}EN_SIP_FILE_NAME;

/***************** function Name enum for Log *********************/
typedef enum _EN_SIP_FUNCTION_NAME
{
    /*Intialization, log, cfg etc */
    SIP_LM_CORELIB_INIT = 0,
    SIP_LM_CORELIB_DEINIT,
    SIP_LM_GET_MAND_CFG,
    SIP_LM_GET_OPT_CFG,
    SIP_LM_RECFG_OPT_CFG,
    SIP_LM_ALLOC_GLOBAL_VAR, /* 5 */
    SIP_LMLOG_REG,
    SIP_LM_MAINTAIN_GET_STACK_VERSION,
    SIP_LM_MAINTAIN_DUMP_TXNCB,
    SIP_LM_MAINTAIN_GET_TXN_STATE,
    SIP_LM_MAINTAIN_GET_NUM_OF_USED_CBS, /* 10 */
    SIP_LM_MAINTAIN_GET_NUM_OF_FREE_CBS,
    SIP_LM_RESET_CORE_LIB,
    SIP_LM_STACK_TIMEOUT_HDL,

    /* transaction api enums */
    SIP_TXN_2543DATA_COMMON_COMPARE,
    SIP_TXN_2XX_RESP_FOR_INV,  /* 15 */
    SIP_TXN_2XXTO6XX_RESP_FOR_NONINV,
    SIP_TXN_3XXTO6XX_RESP_FOR_INV,
    SIP_TXN_CALLING_1XX_RESP_FOR_INV,
    SIP_TXN_CANCEL_2XX_RSP_FRM_TPT,
    SIP_TXN_CANCEL_FOR_INV_TXN_HDLR, /* 20 */
    SIP_TXN_CANCEL_FOR_NONINV_TXN_HDLR,
    SIP_TXN_CANCEL_REQ_HDLR_FRM_TPT,
    SIP_TXN_CANCEL_SEND_RSP_TO_TU_AND_TERMINATE,
    SIP_TXN_CLIENT_RETRANS_REQ,
    SIP_TXN_COMPARE_METHOD, /* 25 */
    SIP_TXN_COMPARE_SENTBY,
    SIP_TXN_COMPARE_VIA,
    SIP_TXN_COPY_HDRS_TO_ACK_MSG,
    SIP_TXN_CREATE_AND_SEND_ACK_FOR_300TO699_RESP,
    SIP_TXN_CREATE_AND_SEND_RSP_MSG_TO_TU, /* 30 */
    SIP_TXN_CREATE_TXNBLK,
    SIP_TXN_DE_INIT,
    SIP_TXN_DESTROY_TXN_BLOCK,
    SIP_TXN_FREE_TRANSACTION,
    SIP_TXN_FSM_CLIENT_CALLING, /* 35 */
    SIP_TXN_FSM_CLIENT_COMPLETED,
    SIP_TXN_FSM_CLIENT_IDLE,
    SIP_TXN_FSM_CLIENT_PROCEEDING,
    SIP_TXN_FSM_CLIENT_TRYING,
    SIP_TXN_FSM_SERVER_COMPLETED, /* 40 */
    SIP_TXN_FSM_SERVER_CONFIRMED,
    SIP_TXN_FSM_SERVER_IDLE,
    SIP_TXN_FSM_SERVER_PROCEEDING,
    SIP_TXN_FSM_SERVER_TRYING,
    SIP_TXN_GEN_INTERNAL_RSP, /* 45 */
    SIP_TXN_GET_BRANCHID_FRM_MSG,
    SIP_TXN_GET_EVENTID,
    SIP_TXN_GET_FREE_CB,
    SIP_TXN_GET_STATE,
    SIP_TXN_GET_TXNBLK_BY_TXNTYPE, /* 50 */
    SIP_TXN_GET_TXNBLK_FOR_2543_MSGS,
    SIP_TXN_GET_TXNBLK_FOR_3261_MSGS,
    SIP_TXN_GET_TXN_TYPE,
    SIP_TXN_HI_SF_REQ_TIMEOUT,
    SIP_TXN_HI_SF_SEND_CANCEL, /* 55 */
    SIP_TXN_HI_SF_SEND_REQ,
    SIP_TXN_HI_SF_SEND_RSP,
    SIP_TXN_HI_SL_SEND_REQ,
    SIP_TXN_HI_SL_SEND_RSP,
    SIP_TXN_HI_TERMINATE_TXN, /* 60 */
    SIP_TXN_INIT,
    SIP_TXN_INIT_TRANSACTION,
    SIP_TXN_IS_3261_COMPLIANT_MSG,
    SIP_TXN_MATCH_SIP_MSG,
    SIP_TXN_NON_CANCEL_MSG_HNDLR,  /* 65 */
    SIP_TXN_OPT_INIT,
    SIP_TXN_PROCEEDING_1XX_RESP_FOR_INV,
    SIP_TXN_REG_TXN_TU_INTF,
    SIP_TXN_RESET,
    SIP_TXN_SEND_CANCEL_FOR_INVITE, /* 70 */
    SIP_TXN_SEND_MSG_TO_TPT,
    SIP_TXN_SEND_RSP_TO_TU,
    SIP_TXN_SEND_STATEFUL_RESP_TO_PEER,
    SIP_TXN_SEND_STATELESS_RESP_TO_PEER,
    SIP_TXN_SERVER_RSP_200TO699_FROM_TU, /* 75 */
    /* Begin  <Tag.YDHD02316> */
    SIP_TXN_SERVER_RSP_MSG_FROM_TU,
    /* End  <Tag.YDHD02316> */
    SIP_TXN_SET_STATE,
    SIP_TXN_START_TIMER,
    SIP_TXN_STOP_TIMER,
    SIP_TXN_TIMEOUT_AND_ICMP_ERROR, /* 80 */
    SIP_TXN_TIMEOUT_HANDLER,
    SIP_TXN_UTIL_GEN_BRANCHID,
    SIP_TXN_UTIL_GEN_TAG,
    SIP_UTIL_MAND_HDR_CHECK,
    SIP_TXN_LI_MSG_RCVD_IND, /* 85 */
    SIP_TXN_LI_MSG_SEND_RESULT_IND,

    /* Transport API enums */
    SIP_TPT_LI_STR_RECV_IND,
    SIP_TPT_LI_SND_RESULT_IND,
    SIP_TPT_HI_SEND_REQ,
    SIP_TPT_HI_SEND_RSP, /* 90 */
    SIP_TPT_VALIDATE_MSG,
    SIP_TPT_PROTO_SWITCH,
    SIP_TPT_SEND_ERR_RSP,
    SIP_TPT_ADD_RECVD_RPORT,
    SIP_TPT_GET_RSP_DEST_ADDR,
    SIP_TPT_CHK_BDY_SIZE,

    /* Codec function name enums */
    SIP_DEC_COMMA_SEP_LIST_HDR,
    SIP_DEC_PROCESS_HEADERS, /* 98 */

    EN_SIP_FUNCTION_BUTT,
    EN_SIP_FUNCTION_END = SIP_ENUM_END
}EN_SIP_FUNCTION_NAME;

/***************** LOG *********************/
typedef enum _EN_SIP_LOG_LEVEL
{

    SIP_LOG_LEVEL_INFO,     /* Informational Log. Just an FYI */
    SIP_LOG_LEVEL_WARNING,  /* An abnormal condition. Usually occurs before an
                               error*/
    SIP_LOG_LEVEL_ERROR,    /* An error has happened. Need to monitor stack */
    SIP_LOG_LEVEL_ENABLE_ALL,
    SIP_LOG_LEVEL_DISBALE_ALL,
    SIP_LOG_LEVEL_BUTT,
    SIP_LOG_LEVEL_ENUM_END=SIP_ENUM_END
}EN_SIP_LOG_LEVEL;

/* This enum lists down all the SIP core and extension functional modules */
typedef enum  _EN_SIP_COMP_ID
{
    SIP_COMP_TPT,
    SIP_COMP_TXN,
    SIP_COMP_SIGCOMP,
    SIP_COMP_CODEC,
    SIP_COMP_GLOBAL,
    SIP_COMP_ENABLE_ALL,
    SIP_COMP_DISBALE_ALL,
    SIP_COMP_BUTT,
    SIP_COMP_END = SIP_ENUM_END
} EN_SIP_COMP_ID;

/*Log function pointer defination */

typedef SS_VOID (*pFnSipLmLogHndlr)
(
    SS_UINT16          usComponentId,
    EN_SIP_LOG_LEVEL   enLogLevel,
    SS_UINT16          usFileId,
    SS_UINT16          usFunctionId,
    SS_UINT16          usLineNo,
    SS_UINT16          usLogStringId
);

#ifdef __cplusplus
}
#endif

#endif

